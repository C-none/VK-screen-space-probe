#version 460
#extension GL_EXT_ray_tracing:enable
#extension GL_GOOGLE_include_directive:require
#include "common.glsl"

layout(binding=0,set=0)uniform accelerationStructureEXT topLevelAS;
layout(binding=1,set=0,rgba8)uniform image2D image;
layout(binding=2,set=0)uniform UBO
{
	mat4 viewInverse;
	mat4 projInverse;
	uint frame;
	uint randomSeed;
	uint recursiveDepth;
	uint sampleCount;
	uint lightCount;
}ubo;
layout(std430,binding=5,set=0)buffer SHcoefficients{float SH[];}shCoefficients;
#include "SH.glsl"

layout(location=0)rayPayloadEXT RayPayload rayPL;

#include "random.glsl"

const uint stack_size=16;
uint samples=ubo.sampleCount;

struct Stack{
	vec3 direct_radiance[stack_size];
	vec3 attenuation[stack_size];
}stack;

void main()
{
	rayPL.radiance=vec3(0.);
	rayPL.worldpos=vec3(0.);
	
	vec3 SH[9];
	for(int i=0;i<9;i++){
		SH[i]=vec3(0.);
	}
	
	rayPL.seed=tea(gl_LaunchIDEXT.y*gl_LaunchSizeEXT.x+gl_LaunchIDEXT.x,ubo.randomSeed);
	
	for(uint i=0;i<samples;i++)
	{
		vec2 subpixel_jitter=vec2(.5);
		const vec2 pixelCenter=vec2(gl_LaunchIDEXT.xy)+subpixel_jitter;
		const vec2 inUV=pixelCenter/vec2(gl_LaunchSizeEXT.xy);
		vec2 d=inUV*2.-1.;
		vec3 origin=(ubo.viewInverse*vec4(0,0,0,1)).xyz;
		vec4 target=ubo.projInverse*vec4(d.x,d.y,1,1);
		vec3 direction=(ubo.viewInverse*vec4(normalize(target.xyz),0.)).xyz;
		float tmin=.001;
		float tmax=10000.;
		
		int depth=0;
		vec3 sampleDirection=vec3(0.);
		for(depth=0;;depth++)
		{
			if(depth==0)rayPL.lightingflag=false;
			else rayPL.lightingflag=true;
			traceRayEXT(topLevelAS,gl_RayFlagsNoneEXT,0xff,0,0,0,origin,tmin,direction,tmax,0);
			stack.direct_radiance[depth]=rayPL.radiance;
			if(rayPL.recursiveflag==false){
				depth=max(depth-1,0);
				break;
			}
			if(depth>=ubo.recursiveDepth-1)break;
			if(depth==0)sampleDirection=rayPL.samplevec;
			stack.attenuation[depth]=rayPL.attenuation;
			origin=rayPL.worldpos;
			direction=rayPL.samplevec;
		}
		if(rayPL.lightingflag==false&&rayPL.recursiveflag==false){
			break;
		}
		vec3 radiance=vec3(0.);
		while(depth>0)
		{
			radiance=stack.direct_radiance[depth]+stack.attenuation[depth]*radiance;
			depth--;
		}
		// clamp radiance for decreasing noise
		// radiance=clamp(radiance,0.,2.);
		update(SH,sampleDirection,radiance);
	}
	
	for(int i=0;i<9;i++){
		SH[i]*=1./float(samples);
	}
	
	uint bias=(gl_LaunchIDEXT.y*gl_LaunchSizeEXT.x+gl_LaunchIDEXT.x)*9;
	
	if(ubo.frame>0)
	{
		float a=1.f/float(ubo.frame+1);
		vec3 old_SH[9];
		for(int i=0;i<9;i++){
			old_SH[i]=loadSH(bias+i);
		}
		for(int i=0;i<9;i++){
			storeSH(mix(old_SH[i],SH[i],a),bias+i);
		}
	}else{
		for(int i=0;i<9;i++){
			storeSH(SH[i],bias+i);
		}
	}
	imageStore(image,ivec2(gl_LaunchIDEXT.xy),vec4(loadSH(bias)*2.,1.));
}
